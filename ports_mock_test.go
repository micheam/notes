// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package notes_test is a generated GoMock package.
package notes_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notes "github.com/micheam/notes"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockBookRepository) DeleteBook(arg0 context.Context, arg1 *notes.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookRepositoryMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRepository)(nil).DeleteBook), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockBookRepository) GetBook(arg0 context.Context, arg1 notes.BookID) (*notes.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(*notes.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookRepositoryMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRepository)(nil).GetBook), arg0, arg1)
}

// InsertBook mocks base method.
func (m *MockBookRepository) InsertBook(arg0 context.Context, arg1 *notes.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBook indicates an expected call of InsertBook.
func (mr *MockBookRepositoryMockRecorder) InsertBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBook", reflect.TypeOf((*MockBookRepository)(nil).InsertBook), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBookRepository) ListBooks(arg0 context.Context) ([]*notes.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0)
	ret0, _ := ret[0].([]*notes.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookRepositoryMockRecorder) ListBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookRepository)(nil).ListBooks), arg0)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(arg0 context.Context, arg1 *notes.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), arg0, arg1)
}

// MockContentRepository is a mock of ContentRepository interface.
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository.
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance.
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockContentRepository) Delete(arg0 context.Context, arg1 *notes.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContentRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContentRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockContentRepository) Get(arg0 context.Context, arg1 notes.ContentID) (*notes.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*notes.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentRepository)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockContentRepository) Insert(arg0 context.Context, arg1 *notes.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockContentRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockContentRepository)(nil).Insert), arg0, arg1)
}

// List mocks base method.
func (m *MockContentRepository) List(arg0 context.Context, arg1 *notes.Book) ([]*notes.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*notes.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContentRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContentRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockContentRepository) Update(arg0 context.Context, arg1 *notes.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContentRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContentRepository)(nil).Update), arg0, arg1)
}
